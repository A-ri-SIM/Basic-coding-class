모듈
=> 서로 데이터를 파일간 사용하기
=> 가지고 올때 require("가지고 올 모듈명")
=> 보내는 파일 module export(보낼 모듈명)

http 모듈 서버 만들기
const {create} = require('domain');
const {readFile} = require('fs');
const http=require('http');
const { parseArgs } = require("util")
http.createServer(function(req,res){})
=>서버 만드는 함수

res.writeHead(요청코드,파일형식)
res.writeHead(200,{"content-type":"text/html;charset=utf-8"})
// =>응답에 대한 정보를 기록하는 함수
res.write("<h1>서버만들기</h1>");
// =>인자를 클라이언트에 보낼 데이터 삽입
res.end("<h1>http 모듈</h1>");
// =>응답에 대한 종료 메서드
// =>인자까지 전달하고 종료


http 상태코드(요청코드)
1.100번대
=> 정보/서버가 요청을 받았고 클라이언트는 작업을 계속해도 됨을 의미

2.200번대
=> 성공/요청을 성공적으로 받았음을 수용했다는 의미
=> 204 : 요청은 성공했으나 제공할 내용이 없음을 의미

3.300번대
=> 리다이레션/요청을 완료하기 위해서 추가적인 작업이 필요함을 의미

4.400번대
=> 클라이언트 서버 오류
=> 401 : 요청에 대한 권한을 의미
=> 403 : 요청이 서버에 의해서 거부됨을 의미
=> 404 : 요청한 url이 없을때

5.500번대=>서버오류


express 모듈에서 응답을 위한 함수
res.send() => 문자열을 응답할때 사용
res.sendFile() => 파일을 응답할때 사용
res.json() => json 객체를 응답할때 사용
res.render() => jade, pug와 같은 템플릿을 렌더링하는 응답

body-parser
=> 기본 입력 양식을 분석함
=> 용량이 많을 때 사용 안함
=> post,put 요청시 들어온 정보를 정보가 있는 req.body에 접근하기 위해 필요함